<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>stlx</string>
		<string>setlx</string>
	</array>
	<key>name</key>
	<string>SetlX</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#fucntions</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#values</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#keywords</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>atomic-comment</key>
		<dict>
			<key>comment</key>
			<string>combination of the atomic single-line- and multi-line-comments</string>
			<key>name</key>
			<string>comment.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#atomic-comment-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-comment-block</string>
				</dict>
			</array>
		</dict>
		<key>atomic-comment-block</key>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>comment</key>
			<string>atomic value, uninterpreted, multiple-line-comment</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.setlx</string>
		</dict>
		<key>atomic-comment-line</key>
		<dict>
			<key>comment</key>
			<string>atomic value, uninterpreted, one-line-comment</string>
			<key>match</key>
			<string>(//)(.)*</string>
			<key>name</key>
			<string>comment.line.setlx</string>
		</dict>
		<key>atomic-double</key>
		<dict>
			<key>comment</key>
			<string>atomic value, double</string>
			<key>match</key>
			<string>((0)*(\d)+)?(\.)(\d)+((e|E)(\+|\-)?(\d)+)?</string>
			<key>name</key>
			<string>constant.numeric.double.setlx</string>
		</dict>
		<key>atomic-false</key>
		<dict>
			<key>comment</key>
			<string>atomic value, false</string>
			<key>match</key>
			<string>(false)</string>
			<key>name</key>
			<string>constant.language.setlx</string>
		</dict>
		<key>atomic-functionSymbol</key>
		<dict>
			<key>comment</key>
			<string>combination of all three ways to defina a functionSymbol for a term</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#atomic-functionSymbol-capital</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-functionSymbol-escaped</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-functionSymbol-internal</string>
				</dict>
			</array>
		</dict>
		<key>atomic-functionSymbol-capital</key>
		<dict>
			<key>comment</key>
			<string>atomic value, functionSymbol for a term, written with an initial capital letter</string>
			<key>match</key>
			<string>([A-Z])([a-zA-Z0-9]|_)*</string>
			<key>name</key>
			<string>entity.functionSymbol.setlx</string>
		</dict>
		<key>atomic-functionSymbol-escaped</key>
		<dict>
			<key>comment</key>
			<string>atomic value, functionSymbol for a term, written with an initial @ as escape-character</string>
			<key>match</key>
			<string>((@)([a-z]))([a-zA-Z0-9]|_)*</string>
			<key>name</key>
			<string>entity.functionSymbol.setlx</string>
		</dict>
		<key>atomic-functionSymbol-internal</key>
		<dict>
			<key>comment</key>
			<string>atomic value, functionSymbol for a term, used internally for definitions</string>
			<key>match</key>
			<string>(\^)([a-zA-Z0-9]|_)*</string>
			<key>name</key>
			<string>entity.functionSymbol.setlx</string>
		</dict>
		<key>atomic-int</key>
		<dict>
			<key>comment</key>
			<string>atomic value, number</string>
			<key>match</key>
			<string>(0)*(\d)+</string>
			<key>name</key>
			<string>constant.numeric.int.setlx</string>
		</dict>
		<key>atomic-languageConstant</key>
		<dict>
			<key>comment</key>
			<string>combination of the three atomic, basic, language-defined constants</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#atomic-om</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-true</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-false</string>
				</dict>
			</array>
		</dict>
		<key>atomic-literal</key>
		<dict>
			<key>comment</key>
			<string>atomic value, literal</string>
			<key>match</key>
			<string>(\')(\'\'|(?!\').)*(\')</string>
			<key>name</key>
			<string>string.quoted.setlx</string>
		</dict>
		<key>atomic-number</key>
		<dict>
			<key>comment</key>
			<string>combination of all ways to define a nuber</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#atomic-number-fraction</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-double</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-int</string>
				</dict>
			</array>
		</dict>
		<key>atomic-number-fraction</key>
		<dict>
			<key>name</key>
			<string>constant.numeric.fraction.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#atomic-int</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-double</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(/)(?!\*|/)</string>
					<key>name</key>
					<string>constant.numeric.fraction.setlx</string>
				</dict>
			</array>
		</dict>
		<key>atomic-om</key>
		<dict>
			<key>comment</key>
			<string>atomic value, om</string>
			<key>match</key>
			<string>(om)</string>
			<key>name</key>
			<string>constant.language.setlx</string>
		</dict>
		<key>atomic-string</key>
		<dict>
			<key>begin</key>
			<string>(\")</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>string.quoted.setlx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>atomic value, string</string>
			<key>end</key>
			<string>(\")</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>string.quoted.setlx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>((?!(\\.)).)</string>
					<key>name</key>
					<string>string.quoted.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\\.)</string>
					<key>name</key>
					<string>constant.character.escape.setlx</string>
				</dict>
			</array>
		</dict>
		<key>atomic-true</key>
		<dict>
			<key>comment</key>
			<string>atomic value, true</string>
			<key>match</key>
			<string>(true)</string>
			<key>name</key>
			<string>constant.language.setlx</string>
		</dict>
		<key>atomics</key>
		<dict>
			<key>comment</key>
			<string>combination of all atomic values</string>
			<key>name</key>
			<string>meta.atomic.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#atomic-languageConstant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-functionSymbol</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-double</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomic-comment</string>
				</dict>
			</array>
		</dict>
		<key>cached-procedure</key>
		<dict>
			<key>begin</key>
			<string>(cachedProcedure)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.cachedProcedure.setlx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>meta.cachedProcedure.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-signature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>call</key>
		<dict>
			<key>begin</key>
			<string>([a-z]\w*)(\s*\()</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.call.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>closure</key>
		<dict>
			<key>begin</key>
			<string>(closure)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.closure.setlx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>meta.closure.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-signature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>collections</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#set</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#list-access</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#list</string>
				</dict>
			</array>
		</dict>
		<key>comparison-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\=\=)</string>
					<key>name</key>
					<string>keyword.operator.comparison.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\!\=)</string>
					<key>name</key>
					<string>keyword.operator.comparison.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(&lt;)</string>
					<key>name</key>
					<string>keyword.operator.comparison.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(&lt;\=)</string>
					<key>name</key>
					<string>keyword.operator.comparison.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\&gt;)</string>
					<key>name</key>
					<string>keyword.operator.comparison.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\&gt;\=)</string>
					<key>name</key>
					<string>keyword.operator.comparison.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(in)</string>
					<key>name</key>
					<string>keyword.operator.comparison.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(notin)</string>
					<key>name</key>
					<string>keyword.operator.comparison.setlx</string>
				</dict>
			</array>
		</dict>
		<key>conjunction</key>
		<dict>
			<key>match</key>
			<string>(\&amp;\&amp;)</string>
			<key>name</key>
			<string>keyword.operator.conjunction.setlx</string>
		</dict>
		<key>disjunction</key>
		<dict>
			<key>match</key>
			<string>(\|\|)</string>
			<key>name</key>
			<string>keyword.operator.disjunction.setlx</string>
		</dict>
		<key>exists</key>
		<dict>
			<key>match</key>
			<string>(exists)</string>
			<key>name</key>
			<string>keyword.operator.setlx</string>
		</dict>
		<key>forall</key>
		<dict>
			<key>match</key>
			<string>(forall)</string>
			<key>name</key>
			<string>keyword.operator.setlx</string>
		</dict>
		<key>fucntions</key>
		<dict>
			<key>name</key>
			<string>meta.function.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#lambda</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#procedure</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#cached-procedure</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#closure</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#call</string>
				</dict>
			</array>
		</dict>
		<key>function-signature</key>
		<dict>
			<key>begin</key>
			<string>(\s*\()</string>
			<key>end</key>
			<string>(\)\s*\{)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\:\=)</string>
					<key>name</key>
					<string>keyword.control.defaultParam.setlx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>general-collection</key>
		<dict>
			<key>name</key>
			<string>meta.collection.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.collection.ranges.setlx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\:</string>
							<key>name</key>
							<string>keyword.operator.setlx</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#iterator-chain</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.collection.conditions.setlx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\|</string>
							<key>name</key>
							<string>keyword.operator.setlx</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#iterator-chain</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>implication</key>
		<dict>
			<key>match</key>
			<string>(\=\&gt;)</string>
			<key>name</key>
			<string>keyword.operator.implication.setlx</string>
		</dict>
		<key>iterator-chain</key>
		<dict>
			<key>name</key>
			<string>meta.iteratorchain.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#iterator-marker</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\,</string>
					<key>name</key>
					<string>keyword.operator.setlx</string>
				</dict>
			</array>
		</dict>
		<key>iterator-marker</key>
		<dict>
			<key>match</key>
			<string>( in )</string>
			<key>name</key>
			<string>keyword.operator.setlx</string>
		</dict>
		<key>keywords</key>
		<dict>
			<key>comment</key>
			<string>combination of all "keyowrds" available</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#implication</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#disjunction</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#conjunction</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comparison-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#product-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#prefix-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#exists</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#forall</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#negator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#range-sign</string>
				</dict>
			</array>
		</dict>
		<key>lambda</key>
		<dict>
			<key>name</key>
			<string>meta.lambda.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#list</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\|\-\&gt;)</string>
					<key>name</key>
					<string>storage.type.lambda.procedure.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\|\=\&gt;)</string>
					<key>name</key>
					<string>storage.type.lambda.closure.setlx</string>
				</dict>
			</array>
		</dict>
		<key>lin-alg</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#setl-matrix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#setl-vector</string>
				</dict>
			</array>
		</dict>
		<key>list</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.list.setlx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.list.setlx</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#general-collection</string>
				</dict>
			</array>
		</dict>
		<key>list-access</key>
		<dict>
			<key>begin</key>
			<string>((\w|\])+\s*)(\[)</string>
			<key>end</key>
			<string>\]</string>
			<key>name</key>
			<string>meta.list.access.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>negator</key>
		<dict>
			<key>match</key>
			<string>(\!)</string>
			<key>name</key>
			<string>keyword.operator.setlx</string>
		</dict>
		<key>prefix-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\*\*)</string>
					<key>name</key>
					<string>keyword.operator.prefix.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\+/)</string>
					<key>name</key>
					<string>keyword.operator.prefix.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\*/)</string>
					<key>name</key>
					<string>keyword.operator.prefix.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\#)</string>
					<key>name</key>
					<string>keyword.operator.prefix.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\-)</string>
					<key>name</key>
					<string>keyword.operator.prefix.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\+)</string>
					<key>name</key>
					<string>keyword.operator.prefix.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\@)</string>
					<key>name</key>
					<string>keyword.operator.prefix.setlx</string>
				</dict>
			</array>
		</dict>
		<key>procedure</key>
		<dict>
			<key>begin</key>
			<string>(procedure)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.procedure.setlx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>meta.procedure.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-signature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>product-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\*)</string>
					<key>name</key>
					<string>keyword.operator.product.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(/)</string>
					<key>name</key>
					<string>keyword.operator.product.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\\)</string>
					<key>name</key>
					<string>keyword.operator.product.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(%)</string>
					<key>name</key>
					<string>keyword.operator.product.setlx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(&gt;&lt;)</string>
					<key>name</key>
					<string>keyword.operator.product.setlx</string>
				</dict>
			</array>
		</dict>
		<key>range-sign</key>
		<dict>
			<key>match</key>
			<string>(\.\.)</string>
			<key>name</key>
			<string>keyword.operator.setlx</string>
		</dict>
		<key>set</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.set.setlx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.set.setlx</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#general-collection</string>
				</dict>
			</array>
		</dict>
		<key>setl-matrix</key>
		<dict>
			<key>begin</key>
			<string>&lt;&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.matrix.setlx</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.matrix.setlx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\&gt;\&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.matrix.setlx</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.matrix.setlx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.matrix.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
				<dict>
					<key>include</key>
					<string>meta.matrix.setlx</string>
				</dict>
			</array>
		</dict>
		<key>setl-vector</key>
		<dict>
			<key>begin</key>
			<string>&lt;&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.vector.setlx</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.vector.setlx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\&gt;\&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.vector.setlx</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.enclosing.vector.setlx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.vector.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#atomic-number</string>
				</dict>
			</array>
		</dict>
		<key>values</key>
		<dict>
			<key>name</key>
			<string>meta.value.setlx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#collections</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#lin-alg</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atomics</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\_</string>
					<key>name</key>
					<string>keyword.control.setlx</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.setlx</string>
	<key>uuid</key>
	<string>8be6972f-85b1-4d39-b3b5-68bbfdb44d84</string>
</dict>
</plist>
