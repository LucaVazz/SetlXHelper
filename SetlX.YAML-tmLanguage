# [PackageDev] target_format: plist, ext: tmLanguage
---
name: SetlX
scopeName: source.setlx
fileTypes: [stlx, setlx]
uuid: 8be6972f-85b1-4d39-b3b5-68bbfdb44d84


patterns:
- include: '#statements'
- include: '#fucntions'
- include: '#keywords'
- include: '#values'


repository:
  statements:
    patterns:
    - include: '#class'
    - include: '#branches'
    - include: '#matches'
    - include: '#loops'
    - include: '#error-handling'
    - name: meta.abort.setlx keyword.control.setlx
      match: (exit)
    - name: meta.abort.setlx keyword.control.setlx
      match: (return)

  class:
    name: meta.class.setlx
    begin: \b(class)\b(\s+)([a-z]\w*)
    beginCaptures:
      '1': {name: keyword.other.setlx}
      '3': {name: entity.class.name.setlx}
    patterns:
    - name: meta.class.args.setlx
      begin: (\()
      patterns:
      - include: '$self'
      end: (\)\s*\{)
    - name: meta.class.staticMembers.setlx
      begin: \b(static)\b(\s*\{)
      beginCaptures:
        '1': {name: keyword.other.setlx}
      patterns:
      - include: '$self'
      end: (\})
    - include: '$self'
    end: (\}\;)

  branches:
    patterns:
    - include: '#if'
    - include: '#else-block'
    - include: '#switch'
  if: 
    name: meta.if.setlx
    begin: (\belse\s+)?\b(if)\b
    beginCaptures:
      '1': {name: keyword.control.setlx}
      '2': {name: keyword.control.setlx}
    patterns:
    - name: meta.if.condition.setlx
      begin: (\()
      patterns:
      - include: '$self'
      end: (\)\s*\{)
    - include: '$self'
    end: (\})
  else-block:
    name: meta.elseBlock.setlx
    begin: \b(else)\b(\s*\{)
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - include: '$self'
    end: (\})
  switch:
    name: meta.switch.setlx
    begin: \b(switch)(\s*\{)
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - name: meta.switch.case.setlx
      begin: \b(case)
      beginCaptures:
        '1': {name: keyword.control.setlx}
      patterns:
      - include: '$self'
      end: (\:)
      endCaptures:
        '1': {name: keyword.control.setlx}
    - name: keyword.control.setlx
      match: \b(default\s*\:)
    - include: '$self'
    end: (\})

  loops:
    patterns:
    - include: '#for'
    - include: '#while'
    - include: '#do-while'
    - name: meta.abort.setlx keyword.control.setlx
      match: \b((continue)|(break))\b
  for:
    name: meta.for.setlx
    begin: \b(for)\b
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - name: meta.for.iterators.setlx
      begin: (\()
      patterns:
      - include: '$self'
      end: (\)\s*\{)
    - include: '$self'
    end: (\})
  while:
    name: meta.while.setlx
    begin: \b(while)\b
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - name: meta.while.condition.setlx
      begin: (\()
      patterns:
      - include: '$self'
      end: (\)\s*\{)
    - include: '$self'
    end: (\})
  do-while:
    name: meta.doWhile.setlx
    begin: \b(do)\b(\s*)(\{)
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - name: meta.doWhile.condition.setlx
      begin: (\})(\s*)(while)(\s*)(\()
      beginCaptures:
        '3': {name: keyword.control.setlx}
      patterns:
      - include: '$self'
      end: (\)\s*\{)
    - include: '$self'
    end: (\)\;)
  
  error-handling:
    patterns:
    - include: '#throw'
    - include: '#try-catch'
    - include: '#check-backtrack'
  throw: 
    name: keyword.control.setlx
    match: \b(throw)\b
  try-catch:
    patterns:
    - include: '#try'
    - include: '#catch'
  try:
    name: meta.try.setlx
    begin: (try)(\s*)(\{)
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - include: '$self'
    end: (\})
  catch:
    name: meta.catch.setlx
    begin: \b((catchLng)|(catchUsr)|(catch))\b
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - name: meta.catch.evar.setlx
      begin: (\()
      patterns:
      - include: '$self'
      end: (\)\s*\{)
    - include: '$self'
    end: (\})
  check-backtrack:
    patterns:
    - include: '#check'
    - include: '#afterbacktrack'
  check:
    name: meta.check.setlx
    begin: (check)(\s*)(\{)
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - name: meta.check.backtrackcall.setlx keyword.control.setlx
      match: \b(backtrack)\b
    - include: '$self'
    end: (\})
  afterbacktrack:
    name: meta.check.afterbacktrack.setlx
    begin: (afterBacktrack)(\s*)(\{)
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - include: '$self'
    end: (\})

  matches:
    patterns:
    - include: '#match'
    - include: '#scan'
  match:
    name: meta.match.setlx
    begin: (match)(\s*\(.*\))\s*(\{)
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - name: meta.match.case.setlx
      begin: \b(case)\b
      beginCaptures:
        '1': {name: keyword.control.setlx}
      patterns:
      - include: '$self'
      - name: keyword.control.setlx
        match: (\|)
      end: (\:)
      endCaptures:
        '1': {name: keyword.control.setlx}
    - include: '#regex-branch'
    - name: keyword.control.setlx
      match: ((default)(\s)*(\:))
    - include: '$self'
    end: (\})
  scan:
    name: meta.scan.setlx
    begin: \b(scan)\b
    beginCaptures:
      '1': {name: keyword.control.setlx}
    patterns:
    - name: meta.scan.expression.setlx
      begin: (\()
      patterns:
      - include: '$self'
      end: (\)\s*)(using)?(\s*\w*\s*)?(\{)
      endCaptures:
        '2': {name: keyword.control.setlx}
    - include: '#regex-branch'
    - name: keyword.control.setlx
      match: (default\s*\:)
    - include: '$self'
    end: (\})
  regex-branch:
    name: meta.regexBranch.setlx
    patterns:
    - name: keyword.control.setlx
      match: \b(regex)\b
    - name: string.regexp.setlx
      begin: (\')
      beginCaptures:
        '1': {name: string.regexp.setlx}
      end: (\')
      endCaptures:
        '1': {name: string.regexp.setlx}
    - name: keyword.control.setlx
      match: \b(as)\b
    - name: keyword.control.setlx
      match: (\|)
    - name: keyword.control.setlx
      match: (\:\s+)

  fucntions:
    name: meta.function.setlx
    patterns:
    - include: '#lambda'
    - include: '#procedure'
    - include: '#cached-procedure'
    - include: '#closure'
    - include: '#call'
  lambda:
    name: meta.lambda.setlx
    patterns:
    - include: '#list'
    - name: storage.type.lambda.procedure.setlx
      match: (\|\-\>)
    - name: storage.type.lambda.closure.setlx
      match: (\|\=\>)
  procedure:
    name: meta.procedure.setlx
    begin: \b(procedure)\b
    beginCaptures:
      '1': {name: storage.type.procedure.setlx}
    patterns:
    - include: '#function-signature'
    - include: '$self'
    end: (\})
  cached-procedure:
    name: meta.cachedProcedure.setlx
    begin: \b(cachedProcedure)\b
    beginCaptures:
      '1': {name: storage.type.cachedProcedure.setlx}
    patterns:
    - include: '#function-signature'
    - include: '$self'
    end: (\})
  closure:
    name: meta.closure.setlx
    begin: \b(closure)\b
    beginCaptures:
      '1': {name: storage.type.closure.setlx}
    patterns:
    - include: '#function-signature'
    - include: '$self'
    end: (\})
  function-signature:
    begin: (\()
    patterns:
    - name: keyword.control.defaultParam.setlx
      match: (\:\=)
    - name: storage.type.modifier.setlx
      match: (rw)
    - include: '$self'
    end: (\)\s*\{)
  call:
    name: meta.call.setlx
    begin: ([a-z]\w*)(\s*\()
    patterns:
    - include: '$self'
    end: (\))

  values:
    name: meta.value.setlx
    patterns:
    - include: '#collections'
    - include: '#lin-alg'
    - include: '#atomics'
    - name: keyword.control.setlx
      match: (\_)

  collections:
    patterns:
    - include: '#set'
    - include: '#list-access'
    - include: '#list'
  set:
    begin: (\{)
    beginCaptures:
      '1': {name: entity.enclosing.set.setlx}
    patterns:
    - include: '#general-collection'
    - include: '$self'
    end: (\})
    endCaptures:
      '1': {name: entity.enclosing.set.setlx}
  list-access:
    begin: ([a-zA-Z0-9\_\]]+)(\[)
    beginCaptures:
      '2': {name: meta.list.access.setlx}
    patterns:
    - include: '$self'
    end: (\])
    endCaptures:
      '1': {name: meta.list.access.setlx}
  list:
    begin: (\[)
    beginCaptures:
      '1': {name: entity.enclosing.list.setlx}
    patterns:
    - include: '#general-collection'
    - include: '$self'
    end: (\])
    endCaptures:
      '1': {name: entity.enclosing.list.setlx}
  general-collection:
    name: meta.collection.setlx
    patterns:
    - name: meta.collection.ranges.setlx
      patterns:
      - name: keyword.operator.setlx
        match: (\:)
    - name: meta.collection.conditions.setlx
      patterns:
      - name: keyword.operator.setlx
        match: (\|)

  lin-alg:
    patterns:
      - include: '#setl-matrix-vector'
  setl-matrix-vector:
    begin: (<<)
    beginCaptures:
      '1':  {name: entity.enclosing.matrix-vector.setlx}
    patterns:
    - include: '$self'
    end: (\>\>)
    endCaptures:
      '1':  {name: entity.enclosing.matrix-vector.setlx}

  keywords:
    comment: combination of all "keyowrds" available
    patterns:
    - include: '#assigment-operators'
    - include: '#logic-operators'
    - include: '#comparison-operators'
    - include: '#product-operators'
    - include: '#prefix-operators'
    - include: '#exists'
    - include: '#forall'
    - include: '#negator'
    - include: '#range-sign'
  assigment-operators:
    patterns:
    - name: keyword.operator.assigment.setlx
      match: (\+\=)
    - name: keyword.operator.assigment.setlx
      match: (\-\=)
    - name: keyword.operator.assigment.setlx
      match: (\*\=)
    - name: keyword.operator.assigment.setlx
      match: (/\=)
    - name: keyword.operator.assigment.setlx
      match: (\\\=)
    - name: keyword.operator.assigment.setlx
      match: (\%\=)
    - name: keyword.operator.assigment.direct.setlx
      match: (\:\=)
  logic-operators:
    patterns:
    - name: keyword.operator.logic.setlx
      match: (\=\>)
    - name: keyword.operator.logic.setlx
      match: (\|\|)
    - name: keyword.operator.logic.setlx
      match: (\&\&)
  comparison-operators:
    patterns:
    - name: keyword.operator.comparison.setlx
      match: (\=\=)
    - name: keyword.operator.comparison.setlx
      match: (\!\=)
    - name: keyword.operator.comparison.setlx
      match: (<\=)
    - name: keyword.operator.comparison.setlx
      match: (<)
    - name: keyword.operator.comparison.setlx
      match: (\>\=)
    - name: keyword.operator.comparison.setlx
      match: (\>)
    - name: keyword.operator.comparison.setlx
      match: \b(notin)\b
    - name: keyword.operator.comparison.setlx
      match: \b(in)\b
  product-operators:
    patterns:
    - name: keyword.operator.product.setlx
      match: (\*)
    - name: keyword.operator.product.setlx
      match: (/)(?!/|\*)
    - name: keyword.operator.product.setlx
      match: (\\)
    - name: keyword.operator.product.setlx
      match: (%)
    - name: keyword.operator.product.setlx
      match: (><)
  prefix-operators:
    patterns:
    - name: keyword.operator.prefix.setlx
      match: (\*\*)
    - name: keyword.operator.prefix.setlx
      match: (\+/)
    - name: keyword.operator.prefix.setlx
      match: (\*/)
    - name: keyword.operator.prefix.setlx
      match: (\#)
    - name: keyword.operator.prefix.setlx
      match: (\-)
    - name: keyword.operator.prefix.setlx
      match: (\+)
  exists:
    name: keyword.operator.setlx
    match: \b(exists)\b
  forall:
    name: keyword.operator.setlx
    match: \b(forall)\b
  negator:
    name: keyword.operator.setlx
    match: (\!)
  range-sign:             # ..
    name: keyword.operator.setlx
    match: (\.\.)

  atomics:
    comment: combination of all atomic values
    name: meta.atomic.setlx
    patterns:
    - include: '#atomic-languageConstant'
    - include: '#atomic-functionSymbol'
    - include: '#atomic-variable-name'
    - include: '#atomic-number'
    - include: '#atomic-double'
    - include: '#atomic-string'
    - include: '#atomic-literal'
    - include: '#atomic-comment'
  atomic-languageConstant:
    comment: combination of the three atomic, basic, language-defined constants
    patterns:
    - include: '#atomic-om'
    - include: '#atomic-true'
    - include: '#atomic-false'
  atomic-om:
    comment: atomic value, om   # undefined
    name: constant.language.setlx
    match: \b(om)\b
  atomic-true:
    comment: atomic value, true
    name: constant.language.setlx
    match: \b(true)\b
  atomic-false:
    comment: atomic value, false
    name: constant.language.setlx
    match: \b(false)\b
  atomic-functionSymbol:
    comment: combination of all three ways to defina a functionSymbol for a term
    patterns:
    - include: '#atomic-functionSymbol-escaped'
    - include: '#atomic-functionSymbol-internal'
  atomic-functionSymbol-escaped:
    comment: atomic value, functionSymbol for a term, used by the user to define a custom Term
    name: entity.functionSymbol.escaped.setlx
    match: ((@[a-zA-Z])([a-zA-Z0-9]|_)+)
  atomic-functionSymbol-internal:
    comment: atomic value, functionSymbol for a term, used internally for definitions
    name: entity.functionSymbol.internal.setlx
    match: ((@@@[a-zA-Z])([a-zA-Z0-9]|_)+)
  atomic-variable-name:
    name: meta.variable.setlx
    match: (([a-zA-Z])([a-zA-Z0-9]|_)+)
  atomic-number:
    comment: combination of all ways to define a nuber
    patterns:
    - include: '#atomic-number-fraction'
    - include: '#atomic-double'
    - include: '#atomic-int'
  atomic-number-fraction:
    name: constant.numeric.fraction.setlx
    patterns:
    - include: '#atomic-int'
    - include: '#atomic-double'
    - name: constant.numeric.fraction.setlx
      match: (/)(?!\*|/|=)
  atomic-double:
    comment: atomic value, double
    name: constant.numeric.double.setlx
    match: ((0)*(\d)+)?(\.)(\d)+((e|E)(\+|\-)?(\d)+)?
  atomic-int:
    comment: atomic value, number
    name: constant.numeric.int.setlx
    match: (0)*(\d)+
  atomic-string:
    comment: atomic value, string
    name: string.quoted.setlx
    begin: (\")
    beginCaptures:
      '1': {name: string.quoted.setlx}
    patterns:
    - name: string.quoted.setlx
      match: ((?!(\\.)).)
    - name: constant.character.escape.setlx
      match: (\\.)
    end: (\")
    endCaptures:
      '1': {name: string.quoted.setlx}
  atomic-literal:
    comment: atomic value, literal  # a string whose escape characters, etc. 
                                    #   aren't interpteted
    name: string.quoted.setlx
    match: (\')(\'\'|(?!\').)*(\')
  atomic-comment:
    comment: combination of the atomic single-line- and multi-line-comments
    name: comment.setlx
    patterns:
    - include: '#atomic-comment-line'
    - include: '#atomic-comment-block'
  atomic-comment-line:
    comment: atomic value, uninterpreted, one-line-comment
    name: comment.line.setlx
    match: (//)(.)*   # sublime always only matches the current line, so no check
                      #   for a line-end / newline-char is needed
  atomic-comment-block:
    comment: atomic value, uninterpreted, multiple-line-comment
    name: comment.block.setlx
    # we want to extned the comment over multiple lines, so we must use `begin` and #   `end` instead of match
    begin: /\*
    end: \*/
...